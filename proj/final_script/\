#T!/usr/bin/env python

import time
import math
import roslib
import rospy
import random
import numpy as np
import tf
import tf2_ros
import transform2d
import argparse
import pprint
from simple_plan import plan_path

from geometry_msgs.msg import Twist
from kobuki_msgs.msg import SensorState
from nav_msgs.msg import Odometry
from kobuki_msgs.msg import BumperEvent
from kobuki_msgs.msg import ButtonEvent

import cv2
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray as FloatArray
from std_msgs.msg import MultiArrayLayout as ArrayLayout
from std_msgs.msg import MultiArrayDimension as ArrayDimension
from std_msgs.msg import Float64 as Float
from sensor_msgs.msg import Image
from sensor_msgs.msg import LaserScan
from cv_bridge import CvBridge, CvBridgeError

PIXEL_METER = 0.003048
CONTROL_PERIOD = rospy.Duration(0.01)
PATH = []
START = []
START_P = []

class Controller:

    # called when an object of type Controller is created
    def __init__(self):
        rospy.init_node('deliver')
        rospy.loginfo('Initializing...')

	self.start_run = rospy.Publisher('/starting_point', String, queue_size=10)

	self.begin_once = False
	self.idx = 0
	self.state = 'update'

        self.cur_x = START_P[0] * PIXEL_METER
        self.cur_y = START_P[1] * -1 * PIXEL_METER
        self.cur_d = START_P[2] * -1 * np.pi/2

	self.threshold = 25
	self.alpha = 1.00 
	self.beta = 0.001

        self.start_particle = rospy.Subscriber('/start_particle', FloatArray,
                                                    self.update_callback)

        self.cmd_vel_pub = rospy.Publisher(
            '/mobile_base/commands/velocity', Twist,
            queue_size=10)

        rospy.Timer(CONTROL_PERIOD, self.control_callback)


    def update_callback(self, msg):
	rospy.loginfo('Updating coordinates from pf!')
        data = msg.data
	rospy.loginfo(data)
        self.cur_x = float(data.pop(0))
        self.cur_y = float(data.pop(0))
        self.cur_d = float(data.pop(0))
	

#    def control_callback(self, timer_event=None):
#        self.start_run.publish(String(data='FHN'))
#        rospy.loginfo('We begin!')
#        self.begin_once = True
	
    def control_callback(self, timer_event=None):
	self.goal_x = PATH[self.index][0]
	self.goal_y = PATH[self.index][1]
	self.goal_d = PATH[self.index][2]
	
	if self.state == 'update':
	    self.idx += 1
	    if self.idx == len(PATH):
		self.state = 'finish'
	    else:
		self.state = 'move'

	elif self.state == 'update':
		if self.index == len(PATH):
			self.state = 'finish'
		cmd_vel.linear.x = 0
		cmd_vel.angular.z = self.alpha*0.3*self.cur_d/abs(math.pi/2) + self.beta* -1*0.03* (cmd_vel.angular.z)
		self.i += 1

	elif self.state == 'move':
		if PATH[self.i][0] - self.cur_x < self.threshold and PATH[self.i][1] < self.cur_y:
			cmd_vel.linear.x = self.alpha *0.1* abs(PATH[self.i][x] - self.cur_x)/100 + self.beta * 0.1* -1*abs(cmd_vel.linear.x)
			cmd_vel.angular.z = 0
			if abs(PATH[self.i][0] - self.cur_x) < self.threshold:
				cmd_vel.linear.x = 0
				cmd_vel.angular.z = 0
				self.state = 'update'

		if PATH[self.i][0] - self.cur_x < self.threshold and PATH[self.i][1] > self.cur_y:
			cmd_vel.linear.x = self.alpha *0.1* abs(PATH[self.i][x] - self.cur_x)/100 + self.beta * 0.1* -1*abs(cmd_vel.linear.x)
			cmd_vel.angular.z = 0
			if abs(PATH[self.i][0] - self.cur_x) < self.threshold:
				cmd_vel.linear.x = 0
				cmd_vel.angular.z = 0
				self.state = 'update'
				
		if PATH[self.i][0] < self.cur_x and PATH[self.i][1] - self.cur_y< self.threshold:
			cmd_vel.linear.x = self.alpha *0.1* abs(PATH[self.i][x] - self.cur_x)/100 + self.beta * 0.1* -1*abs(cmd_vel.linear.x)
			cmd_vel.angular.z = 0
			if abs(PATH[self.i][0] - self.cur_x) < self.threshold:
				cmd_vel.linear.x = 0
				cmd_vel.angular.z = 0
				self.state = 'update'				

		if PATH[self.i][0] > self.cur_x and PATH[self.i][1] - self.cur_y < self.threshold:
			cmd_vel.linear.x = self.alpha *0.1* abs(PATH[self.i][x] - self.cur_x)/100 + self.beta * 0.1* -1*abs(cmd_vel.linear.x)
			cmd_vel.angular.z = 0
			if abs(PATH[self.i][0] - self.cur_x) < self.threshold:
				cmd_vel.linear.x = 0
				cmd_vel.angular.z = 0
				self.state = 'update'
				
	elif self.state == 'finish':
		self.cmd_vel.linear.x = 0
		self.cmd_vel.linear.y = 0 
		self.cmd_vel.angular.z = 0
		self.cmd_vel.publish()

    def run(self):
	rospy.spin()

# main function
if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("starting_node", help="Starting node name", type=str)
    parser.add_argument("destination_node", help="Destination node name", type=str)
    args = parser.parse_args()

    pprint.pprint(args)

    START = args.starting_node
    END = args.destination_node
	
    nodes = {}
    nodes['AOQ'] = (1000,700,0)
    nodes['CD'] = (1400,200,3)
    nodes['CK'] = (100,100,2)
    nodes['FHN'] = (300,700,0)
    nodes['JS'] = (1000,0,2)
    starting_x = nodes[START][0]
    starting_y = nodes[START][1]
    end_x = nodes[END][0]
    end_y = nodes[END][1]

    START_P = nodes[START]

    PATH = plan_path((starting_x,starting_y),(end_x,end_y))

    try:
        ctrl = Controller()
        ctrl.run()
    except rospy.ROSInterruptException:
        pass
